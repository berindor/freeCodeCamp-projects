// Need to multiply by 100 because floating numbers cause problems. 
// Hence every step use pennies, this is cidP, remainsP, changeP.

const banknotes = {
  "PENNY": 1,
  "NICKEL": 5,
  "DIME": 10,
  "QUARTER": 25,
  "ONE": 100, 
  "FIVE": 500,
  "TEN": 1000, 
  "TWENTY": 2000, 
  "ONE HUNDRED": 10000
}

function findChange(cidP, remainsP) {
  let changeP = [];
  cidP.map((item, idx, array) => array[array.length - 1 - idx])
  .forEach(([banknote,amount]) => { 
      let amountForBanknote = Math.min(
        amount, 
        remainsP - (remainsP % banknotes[banknote])
      );
      changeP.push([banknote, amountForBanknote]);
      remainsP -= amountForBanknote;
    }
  ) 
  return [remainsP, changeP]
}

function transformChanges(changeP) {
  return {status: "OPEN", change: changeP
      .filter(([banknote, amount]) => amount > 0)
      .map(([banknote, amount]) => [banknote, amount / 100])};
}

function checkCashRegister(price, cash, cid) {
  let cidP = cid.map( subArr => [subArr[0], subArr[1] * 1000 / 10]);
  let remainsP = cash * 100 - price * 100;
  let sum = 0; 
  cidP.forEach( ([banknote, amount]) => { sum += amount; });
  if (remainsP === sum) { 
    return {status: "CLOSED", change: [...cid]};
  } 
  if (remainsP > sum) {
    return {status: "INSUFFICIENT_FUNDS", change: []};
  } 
  let [remainingValue, changeP] = findChange(cidP, remainsP);
  if (remainingValue === 0) { 
    return transformChanges(changeP);
  } 
// If findChange does not find the correct change because of the amount of QUARTERs in cidP, reducing the quarters in cidP by (changeP[quarters] so far - 25) solves the problem.
  console.log("2. Ã¡g");
  cidP[3][1] = changeP[5][1] - 25;
//  console.log(remainsP, cidP);
  [remainingValue, changeP] = findChange(cidP, remainsP);
  if (remainingValue === 0) { 
    return transformChanges(changeP);
  } else {
    return {status: "INSUFFICIENT_FUNDS", change: []};
  }
}

console.log(checkCashRegister(19.7, 20, [["PENNY", 0.01], ["NICKEL", 0], ["DIME", 0.4], ["QUARTER", 0.75], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));

